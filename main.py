"""Cópia de Trabalho Prático TP1 - Webscrapping

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TioU8PDe1fgYlXK2cBmQ-rd4OyKWAZCA
"""

import requests, json
from bs4 import BeautifulSoup
from collections import defaultdict
from dataclasses import dataclass, field, asdict
from fastapi import FastAPI, HTTPException

"""
Projeto: Web Scraping - Tecnologias da UFC Inova
Autor: David Lucas Pereira Braga dos Santos

Descrição:
    Este projeto realiza Web Scraping no portal UFC Inova, coletando dados sobre
    tecnologias desenvolvidas pela Universidade Federal do Ceará (UFC).
    As informações extraídas incluem:
    - ID da Tecnologia
    - Título
    - Slug
    - Data da publicação
    - Data da última modificação
    - Link do pôster da tecnologia
    - Descrição
    - Benefícios
    - Status
    - TRL
    - Inventores
    - Departamento
    - Contatos

Resultado:
    Os dados são estruturados e exportados em formato JSON.
"""

#API da UFC INOVA
url_base = "https://ufcinova.ufc.br/wp-json/wp/v2/posts"


#Molde das informações da tecnologia
@dataclass
class Tecnologia:
    id: int
    titulo: str
    slug: str
    data_publicacao: str
    data_ultima_modificacao: str
    link_post_tecnologia: str
    status: str = None
    trl: str = None
    beneficios: list = field(default_factory=list)
    descricao: list = field(default_factory=list)
    pessoas_inventoras: list = field(default_factory=list)
    departamento: str = None
    contatos: list = field(default_factory=list)


categorias_id ={
    "ALIMENTOS": 36,
    "COSMÉTICOS": 34,
    "QUÍMICO": 32,
    "TIC": 44,
    "CIÊNCIAS DA SAÚDE": 38,
    "ENERGIA E MEIO AMBIENTE": 46,
    "BIOTECNOLOGIA": 40,
    "ENGENHARIAS": 48,
    "AGROPECUÁRIA": 42,
    "INDÚSTRIA": 50,
    "SOFTWARE": 115
}

CABECALHOS = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:118.0) Gecko/20100101 Firefox/118.0"}

def coletar_dados_por_categoria(url:str, categorias:dict) -> dict:
    """
    Coleta os dados de todas as categorias disponíveis na API da UFC Inova.

    Args:
        url_base (str): URL base da API.
        categorias (dict): Dicionário com nome e ID das categorias.

    Returns:
        dict: Dicionário contendo o nome da categoria como chave e uma lista de JSONs como valor.
    """

    dados_por_categoria = defaultdict(list)
    for categoria_nome, id in categorias_id.items():
        pagina_json = 1
        while True:
            try:
                parametros = {
                    'categories': id,
                    'page': pagina_json
                }
                resposta = requests.get(url, headers=CABECALHOS, timeout=20, params=parametros)
                resposta.raise_for_status()
                respostaJson = resposta.json()
                dados_por_categoria[categoria_nome].append(respostaJson[:])
                print("Página carregada com sucesso!")
                total_paginas_json = int(resposta.headers.get("X-WP-TotalPages", 1))
                print(f"{categoria_nome} - {pagina_json}/{total_paginas_json}")
                if pagina_json == total_paginas_json:
                    break

                pagina_json += 1

            except requests.exceptions.RequestException as e:
                    print(f"Erro ao acessar a categoria {categoria_nome} da página {pagina_json}: {e}")


    return dados_por_categoria



def extrair_campos_textos(lista_textos: list) -> dict:
    """
        Extrai informações estruturadas (benefícios, status, TRL, descrição, inventores, departamento e contatos)
        a partir de uma lista de textos obtida do conteúdo HTML de uma tecnologia na Vitrine Tecnológica da UFC Inova.

        Essa função assume que os textos seguem uma ordem padronizada na página da UFC Inova,
        permitindo identificar cada campo com base em palavras-chave (como "Benefícios", "Status", "TRL" etc.) e a ordem de aparição, que é
        benefício, status, TRL, descrição, pessoas inventoras, departamento e contatos.

        Args:
            lista_textos (list):
                Lista de strings extraídas do HTML da página de uma tecnologia.
                Cada elemento representa uma linha ou bloco de texto visível no site.

        Returns:
            dict:
                Dicionário contendo as informações extraídas, com as seguintes chaves:
                    - "beneficios" (list[str]): lista dos benefícios da tecnologia.
                    - "status" (str): estado atual da tecnologia (ex: "Vigente").
                    - "trl" (str): nível de maturidade tecnológica.
                    - "descricao" (list[str]): parágrafos descritivos sobre a tecnologia.
                    - "pessoas_inventoras" (list[str]): nomes das pessoas inventoras.
                    - "departamento" (str): departamento ou laboratório responsável.
                    - "contatos" (list[str]): informações de contato (telefone e e-mail).
    """

    informacoes = defaultdict(list)
    tamanho = len(lista_textos)
    i = 0
    while i < tamanho:

        #Capturando o benefício
        if lista_textos[i].lower().startswith("benefícios"):
            i += 1
            while not lista_textos[i].lower().startswith("status"):
                informacoes['beneficios'].append(lista_textos[i].strip().replace('\n', ' '))
                i += 1
            continue

        #Capturando o status
        elif lista_textos[i].lower().startswith("status"):
            status = lista_textos[i].split(" ")[1].replace(".", "")
            informacoes['status'] = status.strip()

        #Capturando o TRL
        elif lista_textos[i].lower().startswith("tecnológica"):
            index_trl = i+1
            trl = lista_textos[index_trl]
            informacoes['trl'] = trl.strip()

        #Capturando a descrição
        elif lista_textos[i].lower().startswith("pessoas inventoras"):
            informacoes['descricao'] = lista_textos[index_trl+1:i]
            indexPessoas = i+1

        #Capturando o telefone, departamento e as pessoas inventoras
        elif lista_textos[i].lower().startswith('fone'):
            fone = lista_textos[i].split(":")[1]
            indexDepartamento = i-2
            departamento = lista_textos[indexDepartamento]
            pessoas_inventoras = lista_textos[indexPessoas:indexDepartamento]
            informacoes['pessoas_inventoras'] = pessoas_inventoras
            informacoes['contatos'].append(fone.strip())
            informacoes['departamento'] = departamento.strip()

        #Capturando o email
        elif lista_textos[i].lower().startswith('e-mail'):
            email = lista_textos[i].split(":")[1]
            informacoes['contatos'].append(email.strip())

        i += 1

    return informacoes

def processar_dados_html(dados_brutos: dict) -> dict:
    """
    Processa o conteúdo HTML de cada tecnologia obtida da API da UFC Inova,
    extraindo informações relevantes e estruturando-as em instâncias da classe 'Tecnologia'.

    Esta função percorre o dicionário bruto retornado pela raspagem inicial,
    acessa o campo "content" (HTML) de cada post, e utiliza a função 'extrair_campos_textos'
    para capturar os dados específicos (benefícios, TRL, inventores etc.).

    Args:
        dados_brutos (dict):
            Dicionário contendo, para cada categoria, uma lista de páginas,
            e em cada página, uma lista de JSONs representando as tecnologias.

    Returns:
        dict:
            Dicionário com as categorias como chaves e listas de objetos 'Tecnologia' (convertíveis em dicionários)
            como valores. Cada objeto contém informações estruturadas sobre uma tecnologia.
    """

    tecnologias_por_categoria = defaultdict(list)

    for categoria_nome, paginas_json in dados_brutos.items():
        for pagina_json in paginas_json:
            for post_tecnologia in pagina_json:

                html = post_tecnologia['content']['rendered']
                soup = BeautifulSoup(html, 'html.parser')
                lista_string = [text for text in soup.stripped_strings]
                dados_extraidos = extrair_campos_textos(lista_string)

                molde_tecnologia = Tecnologia(
                    id = post_tecnologia["id"],
                    titulo = post_tecnologia["title"]["rendered"],
                    slug = post_tecnologia["slug"],
                    data_publicacao = post_tecnologia["date_gmt"],
                    data_ultima_modificacao = post_tecnologia["modified_gmt"],
                    link_post_tecnologia = post_tecnologia["link"],
                    status = dados_extraidos.get('status'),
                    trl = dados_extraidos.get("trl"),
                    beneficios = dados_extraidos.get("beneficios", []),
                    descricao = dados_extraidos.get("descricao", []),
                    pessoas_inventoras = dados_extraidos.get("pessoas_inventoras", []),
                    departamento = dados_extraidos.get("departamento"),
                    contatos = dados_extraidos.get("contatos", [])
                )

                tecnologias_por_categoria[categoria_nome].append(molde_tecnologia)


    return tecnologias_por_categoria

if __name__ == "__main__":
    dados_brutos = coletar_dados_por_categoria(url_base, categorias_id)
    tecnologias_processadas= processar_dados_html(dados_brutos)

    tecnologias_processadas_dict = defaultdict(list)
    for categoria, tecnologias in tecnologias_processadas.items():
        for tec in tecnologias:
            tec_dict = asdict(tec)
            tecnologias_processadas_dict[categoria].append(tec_dict)

    with open("dados_ufcinova.json", "w", encoding="utf-8") as f:
        json.dump(tecnologias_processadas_dict, f, ensure_ascii=False, indent=2)

    # Verificando se o banco de dados estava completo
    print("\nCategorias - Qtd De Artigos")
    total = 0
    for key, paginas in dados_brutos.items():
        qtdItens = 0
        for pag in paginas:
            qtdItens += len(pag)
        total += qtdItens
        print(f"{key} - {qtdItens}")
    print(f'Total: {total}')



app = FastAPI(
    title="API - Tecnologias UFC Inova",
    description="API pública com informações sobre tecnologias da Universidade Federal do Ceará (UFC).",
    version="1.0.0"
)

with open("dados_ufcinova.json", "r", encoding="utf-8") as f:
    dados = json.load(f)

@app.get("/")
def raiz():
    return {"mensagem": "Bem-vindo à API da UFC Inova! Acesse /docs para explorar os endpoints."}


@app.get("/categorias")
def listar_categorias():
    return {"categorias": list(dados.keys())}

@app.get("/tecnologias")
def listar_todas():
    return dados


@app.get("/tecnologias/{categoria}")
def listar_por_categoria(categoria: str):
    categoria = categoria.upper()
    if categoria not in dados:
        raise HTTPException(status_code=404, detail="Categoria não encontrada.")
    return dados[categoria]

@app.get("/buscar_titulo")
def buscar_por_titulo(chave: str):
    resultados = []
    for cat, tecs in dados.items():
        for tec in tecs:
            if chave.lower() in tec["titulo"].lower():
                resultados.append(tec)
    return resultados

@app.get("/buscar_departamento")
def buscar_por_departamento(chave: str):
    resultados = []
    for cat, tecs in dados.items():
        for tec in tecs:
            if chave.lower() in tec["departamento"].lower():
                resultados.append(tec)
    return resultados

